/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sphms.common.service.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.sphms.common.service.model.Booking_Hording;
import com.sphms.common.service.model.Booking_HordingModel;
import com.sphms.common.service.service.persistence.Booking_HordingPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Booking_Hording service. Represents a row in the &quot;SPHMS_Booking_Hording&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link Booking_HordingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Booking_HordingImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Booking_HordingImpl
 * @see Booking_Hording
 * @see Booking_HordingModel
 * @generated
 */
@ProviderType
public class Booking_HordingModelImpl extends BaseModelImpl<Booking_Hording>
	implements Booking_HordingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a booking_ hording model instance should use the {@link Booking_Hording} interface instead.
	 */
	public static final String TABLE_NAME = "SPHMS_Booking_Hording";
	public static final Object[][] TABLE_COLUMNS = {
			{ "bookingId", Types.BIGINT },
			{ "hordingId", Types.BIGINT },
			{ "mountingCharge", Types.DOUBLE },
			{ "printingCharge", Types.DOUBLE },
			{ "units", Types.INTEGER },
			{ "hsnNo", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("bookingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("hordingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mountingCharge", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("printingCharge", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("units", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("hsnNo", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table SPHMS_Booking_Hording (bookingId LONG not null,hordingId LONG not null,mountingCharge DOUBLE,printingCharge DOUBLE,units INTEGER,hsnNo VARCHAR(75) null,primary key (bookingId, hordingId))";
	public static final String TABLE_SQL_DROP = "drop table SPHMS_Booking_Hording";
	public static final String ORDER_BY_JPQL = " ORDER BY booking_Hording.id.bookingId ASC, booking_Hording.id.hordingId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPHMS_Booking_Hording.bookingId ASC, SPHMS_Booking_Hording.hordingId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.sphms.common.service.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.sphms.common.service.model.Booking_Hording"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.sphms.common.service.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.sphms.common.service.model.Booking_Hording"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.sphms.common.service.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.sphms.common.service.model.Booking_Hording"),
			true);
	public static final long BOOKINGID_COLUMN_BITMASK = 1L;
	public static final long HORDINGID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.sphms.common.service.service.util.PropsUtil.get(
				"lock.expiration.time.com.sphms.common.service.model.Booking_Hording"));

	public Booking_HordingModelImpl() {
	}

	@Override
	public Booking_HordingPK getPrimaryKey() {
		return new Booking_HordingPK(_bookingId, _hordingId);
	}

	@Override
	public void setPrimaryKey(Booking_HordingPK primaryKey) {
		setBookingId(primaryKey.bookingId);
		setHordingId(primaryKey.hordingId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new Booking_HordingPK(_bookingId, _hordingId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((Booking_HordingPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Booking_Hording.class;
	}

	@Override
	public String getModelClassName() {
		return Booking_Hording.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("bookingId", getBookingId());
		attributes.put("hordingId", getHordingId());
		attributes.put("mountingCharge", getMountingCharge());
		attributes.put("printingCharge", getPrintingCharge());
		attributes.put("units", getUnits());
		attributes.put("hsnNo", getHsnNo());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long bookingId = (Long)attributes.get("bookingId");

		if (bookingId != null) {
			setBookingId(bookingId);
		}

		Long hordingId = (Long)attributes.get("hordingId");

		if (hordingId != null) {
			setHordingId(hordingId);
		}

		Double mountingCharge = (Double)attributes.get("mountingCharge");

		if (mountingCharge != null) {
			setMountingCharge(mountingCharge);
		}

		Double printingCharge = (Double)attributes.get("printingCharge");

		if (printingCharge != null) {
			setPrintingCharge(printingCharge);
		}

		Integer units = (Integer)attributes.get("units");

		if (units != null) {
			setUnits(units);
		}

		String hsnNo = (String)attributes.get("hsnNo");

		if (hsnNo != null) {
			setHsnNo(hsnNo);
		}
	}

	@Override
	public long getBookingId() {
		return _bookingId;
	}

	@Override
	public void setBookingId(long bookingId) {
		_columnBitmask |= BOOKINGID_COLUMN_BITMASK;

		if (!_setOriginalBookingId) {
			_setOriginalBookingId = true;

			_originalBookingId = _bookingId;
		}

		_bookingId = bookingId;
	}

	public long getOriginalBookingId() {
		return _originalBookingId;
	}

	@Override
	public long getHordingId() {
		return _hordingId;
	}

	@Override
	public void setHordingId(long hordingId) {
		_hordingId = hordingId;
	}

	@Override
	public double getMountingCharge() {
		return _mountingCharge;
	}

	@Override
	public void setMountingCharge(double mountingCharge) {
		_mountingCharge = mountingCharge;
	}

	@Override
	public double getPrintingCharge() {
		return _printingCharge;
	}

	@Override
	public void setPrintingCharge(double printingCharge) {
		_printingCharge = printingCharge;
	}

	@Override
	public int getUnits() {
		return _units;
	}

	@Override
	public void setUnits(int units) {
		_units = units;
	}

	@Override
	public String getHsnNo() {
		if (_hsnNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _hsnNo;
		}
	}

	@Override
	public void setHsnNo(String hsnNo) {
		_hsnNo = hsnNo;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Booking_Hording toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Booking_Hording)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		Booking_HordingImpl booking_HordingImpl = new Booking_HordingImpl();

		booking_HordingImpl.setBookingId(getBookingId());
		booking_HordingImpl.setHordingId(getHordingId());
		booking_HordingImpl.setMountingCharge(getMountingCharge());
		booking_HordingImpl.setPrintingCharge(getPrintingCharge());
		booking_HordingImpl.setUnits(getUnits());
		booking_HordingImpl.setHsnNo(getHsnNo());

		booking_HordingImpl.resetOriginalValues();

		return booking_HordingImpl;
	}

	@Override
	public int compareTo(Booking_Hording booking_Hording) {
		Booking_HordingPK primaryKey = booking_Hording.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Booking_Hording)) {
			return false;
		}

		Booking_Hording booking_Hording = (Booking_Hording)obj;

		Booking_HordingPK primaryKey = booking_Hording.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		Booking_HordingModelImpl booking_HordingModelImpl = this;

		booking_HordingModelImpl._originalBookingId = booking_HordingModelImpl._bookingId;

		booking_HordingModelImpl._setOriginalBookingId = false;

		booking_HordingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Booking_Hording> toCacheModel() {
		Booking_HordingCacheModel booking_HordingCacheModel = new Booking_HordingCacheModel();

		booking_HordingCacheModel.booking_HordingPK = getPrimaryKey();

		booking_HordingCacheModel.bookingId = getBookingId();

		booking_HordingCacheModel.hordingId = getHordingId();

		booking_HordingCacheModel.mountingCharge = getMountingCharge();

		booking_HordingCacheModel.printingCharge = getPrintingCharge();

		booking_HordingCacheModel.units = getUnits();

		booking_HordingCacheModel.hsnNo = getHsnNo();

		String hsnNo = booking_HordingCacheModel.hsnNo;

		if ((hsnNo != null) && (hsnNo.length() == 0)) {
			booking_HordingCacheModel.hsnNo = null;
		}

		return booking_HordingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{bookingId=");
		sb.append(getBookingId());
		sb.append(", hordingId=");
		sb.append(getHordingId());
		sb.append(", mountingCharge=");
		sb.append(getMountingCharge());
		sb.append(", printingCharge=");
		sb.append(getPrintingCharge());
		sb.append(", units=");
		sb.append(getUnits());
		sb.append(", hsnNo=");
		sb.append(getHsnNo());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.sphms.common.service.model.Booking_Hording");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>bookingId</column-name><column-value><![CDATA[");
		sb.append(getBookingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hordingId</column-name><column-value><![CDATA[");
		sb.append(getHordingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mountingCharge</column-name><column-value><![CDATA[");
		sb.append(getMountingCharge());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>printingCharge</column-name><column-value><![CDATA[");
		sb.append(getPrintingCharge());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>units</column-name><column-value><![CDATA[");
		sb.append(getUnits());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hsnNo</column-name><column-value><![CDATA[");
		sb.append(getHsnNo());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Booking_Hording.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Booking_Hording.class
		};
	private long _bookingId;
	private long _originalBookingId;
	private boolean _setOriginalBookingId;
	private long _hordingId;
	private double _mountingCharge;
	private double _printingCharge;
	private int _units;
	private String _hsnNo;
	private long _columnBitmask;
	private Booking_Hording _escapedModel;
}