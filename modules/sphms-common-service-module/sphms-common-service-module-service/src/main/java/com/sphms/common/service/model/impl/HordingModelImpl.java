/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sphms.common.service.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.sphms.common.service.model.Hording;
import com.sphms.common.service.model.HordingModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Hording service. Represents a row in the &quot;SPHMS_Hording&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link HordingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HordingImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see HordingImpl
 * @see Hording
 * @see HordingModel
 * @generated
 */
@ProviderType
public class HordingModelImpl extends BaseModelImpl<Hording>
	implements HordingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a hording model instance should use the {@link Hording} interface instead.
	 */
	public static final String TABLE_NAME = "SPHMS_Hording";
	public static final Object[][] TABLE_COLUMNS = {
			{ "hordingId", Types.BIGINT },
			{ "title", Types.VARCHAR },
			{ "location", Types.VARCHAR },
			{ "city", Types.VARCHAR },
			{ "district", Types.VARCHAR },
			{ "state_", Types.VARCHAR },
			{ "hordingType", Types.VARCHAR },
			{ "mediaVehicle", Types.VARCHAR },
			{ "size_", Types.VARCHAR },
			{ "pricePerMonth", Types.DOUBLE },
			{ "normalImageId", Types.BIGINT },
			{ "shortImageId", Types.BIGINT },
			{ "longImageId", Types.BIGINT },
			{ "landLordId", Types.BIGINT },
			{ "ownerType", Types.INTEGER },
			{ "upinNo", Types.VARCHAR },
			{ "mncTax", Types.DOUBLE },
			{ "otherExpYear", Types.DOUBLE },
			{ "status", Types.INTEGER },
			{ "createDate", Types.TIMESTAMP },
			{ "createdBy", Types.BIGINT },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "modifiedBy", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("hordingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("location", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("district", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hordingType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mediaVehicle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("size_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pricePerMonth", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("normalImageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("shortImageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("longImageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("landLordId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ownerType", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("upinNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mncTax", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("otherExpYear", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table SPHMS_Hording (hordingId LONG not null primary key,title VARCHAR(100) null,location VARCHAR(75) null,city VARCHAR(75) null,district VARCHAR(75) null,state_ VARCHAR(75) null,hordingType VARCHAR(10) null,mediaVehicle VARCHAR(30) null,size_ VARCHAR(75) null,pricePerMonth DOUBLE,normalImageId LONG,shortImageId LONG,longImageId LONG,landLordId LONG,ownerType INTEGER,upinNo VARCHAR(75) null,mncTax DOUBLE,otherExpYear DOUBLE,status INTEGER,createDate DATE null,createdBy LONG,modifiedDate DATE null,modifiedBy LONG)";
	public static final String TABLE_SQL_DROP = "drop table SPHMS_Hording";
	public static final String ORDER_BY_JPQL = " ORDER BY hording.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY SPHMS_Hording.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.sphms.common.service.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.sphms.common.service.model.Hording"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.sphms.common.service.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.sphms.common.service.model.Hording"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.sphms.common.service.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.sphms.common.service.model.Hording"),
			true);
	public static final long LANDLORDID_COLUMN_BITMASK = 1L;
	public static final long STATUS_COLUMN_BITMASK = 2L;
	public static final long CREATEDATE_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.sphms.common.service.service.util.PropsUtil.get(
				"lock.expiration.time.com.sphms.common.service.model.Hording"));

	public HordingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _hordingId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setHordingId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _hordingId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Hording.class;
	}

	@Override
	public String getModelClassName() {
		return Hording.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("hordingId", getHordingId());
		attributes.put("title", getTitle());
		attributes.put("location", getLocation());
		attributes.put("city", getCity());
		attributes.put("district", getDistrict());
		attributes.put("state", getState());
		attributes.put("hordingType", getHordingType());
		attributes.put("mediaVehicle", getMediaVehicle());
		attributes.put("size", getSize());
		attributes.put("pricePerMonth", getPricePerMonth());
		attributes.put("normalImageId", getNormalImageId());
		attributes.put("shortImageId", getShortImageId());
		attributes.put("longImageId", getLongImageId());
		attributes.put("landLordId", getLandLordId());
		attributes.put("ownerType", getOwnerType());
		attributes.put("upinNo", getUpinNo());
		attributes.put("mncTax", getMncTax());
		attributes.put("otherExpYear", getOtherExpYear());
		attributes.put("status", getStatus());
		attributes.put("createDate", getCreateDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("modifiedBy", getModifiedBy());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long hordingId = (Long)attributes.get("hordingId");

		if (hordingId != null) {
			setHordingId(hordingId);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String location = (String)attributes.get("location");

		if (location != null) {
			setLocation(location);
		}

		String city = (String)attributes.get("city");

		if (city != null) {
			setCity(city);
		}

		String district = (String)attributes.get("district");

		if (district != null) {
			setDistrict(district);
		}

		String state = (String)attributes.get("state");

		if (state != null) {
			setState(state);
		}

		String hordingType = (String)attributes.get("hordingType");

		if (hordingType != null) {
			setHordingType(hordingType);
		}

		String mediaVehicle = (String)attributes.get("mediaVehicle");

		if (mediaVehicle != null) {
			setMediaVehicle(mediaVehicle);
		}

		String size = (String)attributes.get("size");

		if (size != null) {
			setSize(size);
		}

		Double pricePerMonth = (Double)attributes.get("pricePerMonth");

		if (pricePerMonth != null) {
			setPricePerMonth(pricePerMonth);
		}

		Long normalImageId = (Long)attributes.get("normalImageId");

		if (normalImageId != null) {
			setNormalImageId(normalImageId);
		}

		Long shortImageId = (Long)attributes.get("shortImageId");

		if (shortImageId != null) {
			setShortImageId(shortImageId);
		}

		Long longImageId = (Long)attributes.get("longImageId");

		if (longImageId != null) {
			setLongImageId(longImageId);
		}

		Long landLordId = (Long)attributes.get("landLordId");

		if (landLordId != null) {
			setLandLordId(landLordId);
		}

		Integer ownerType = (Integer)attributes.get("ownerType");

		if (ownerType != null) {
			setOwnerType(ownerType);
		}

		String upinNo = (String)attributes.get("upinNo");

		if (upinNo != null) {
			setUpinNo(upinNo);
		}

		Double mncTax = (Double)attributes.get("mncTax");

		if (mncTax != null) {
			setMncTax(mncTax);
		}

		Double otherExpYear = (Double)attributes.get("otherExpYear");

		if (otherExpYear != null) {
			setOtherExpYear(otherExpYear);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long createdBy = (Long)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long modifiedBy = (Long)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}
	}

	@Override
	public long getHordingId() {
		return _hordingId;
	}

	@Override
	public void setHordingId(long hordingId) {
		_hordingId = hordingId;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public String getLocation() {
		if (_location == null) {
			return StringPool.BLANK;
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		_location = location;
	}

	@Override
	public String getCity() {
		if (_city == null) {
			return StringPool.BLANK;
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		_city = city;
	}

	@Override
	public String getDistrict() {
		if (_district == null) {
			return StringPool.BLANK;
		}
		else {
			return _district;
		}
	}

	@Override
	public void setDistrict(String district) {
		_district = district;
	}

	@Override
	public String getState() {
		if (_state == null) {
			return StringPool.BLANK;
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		_state = state;
	}

	@Override
	public String getHordingType() {
		if (_hordingType == null) {
			return StringPool.BLANK;
		}
		else {
			return _hordingType;
		}
	}

	@Override
	public void setHordingType(String hordingType) {
		_hordingType = hordingType;
	}

	@Override
	public String getMediaVehicle() {
		if (_mediaVehicle == null) {
			return StringPool.BLANK;
		}
		else {
			return _mediaVehicle;
		}
	}

	@Override
	public void setMediaVehicle(String mediaVehicle) {
		_mediaVehicle = mediaVehicle;
	}

	@Override
	public String getSize() {
		if (_size == null) {
			return StringPool.BLANK;
		}
		else {
			return _size;
		}
	}

	@Override
	public void setSize(String size) {
		_size = size;
	}

	@Override
	public double getPricePerMonth() {
		return _pricePerMonth;
	}

	@Override
	public void setPricePerMonth(double pricePerMonth) {
		_pricePerMonth = pricePerMonth;
	}

	@Override
	public long getNormalImageId() {
		return _normalImageId;
	}

	@Override
	public void setNormalImageId(long normalImageId) {
		_normalImageId = normalImageId;
	}

	@Override
	public long getShortImageId() {
		return _shortImageId;
	}

	@Override
	public void setShortImageId(long shortImageId) {
		_shortImageId = shortImageId;
	}

	@Override
	public long getLongImageId() {
		return _longImageId;
	}

	@Override
	public void setLongImageId(long longImageId) {
		_longImageId = longImageId;
	}

	@Override
	public long getLandLordId() {
		return _landLordId;
	}

	@Override
	public void setLandLordId(long landLordId) {
		_columnBitmask |= LANDLORDID_COLUMN_BITMASK;

		if (!_setOriginalLandLordId) {
			_setOriginalLandLordId = true;

			_originalLandLordId = _landLordId;
		}

		_landLordId = landLordId;
	}

	public long getOriginalLandLordId() {
		return _originalLandLordId;
	}

	@Override
	public int getOwnerType() {
		return _ownerType;
	}

	@Override
	public void setOwnerType(int ownerType) {
		_ownerType = ownerType;
	}

	@Override
	public String getUpinNo() {
		if (_upinNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _upinNo;
		}
	}

	@Override
	public void setUpinNo(String upinNo) {
		_upinNo = upinNo;
	}

	@Override
	public double getMncTax() {
		return _mncTax;
	}

	@Override
	public void setMncTax(double mncTax) {
		_mncTax = mncTax;
	}

	@Override
	public double getOtherExpYear() {
		return _otherExpYear;
	}

	@Override
	public void setOtherExpYear(double otherExpYear) {
		_otherExpYear = otherExpYear;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Hording.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Hording toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Hording)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		HordingImpl hordingImpl = new HordingImpl();

		hordingImpl.setHordingId(getHordingId());
		hordingImpl.setTitle(getTitle());
		hordingImpl.setLocation(getLocation());
		hordingImpl.setCity(getCity());
		hordingImpl.setDistrict(getDistrict());
		hordingImpl.setState(getState());
		hordingImpl.setHordingType(getHordingType());
		hordingImpl.setMediaVehicle(getMediaVehicle());
		hordingImpl.setSize(getSize());
		hordingImpl.setPricePerMonth(getPricePerMonth());
		hordingImpl.setNormalImageId(getNormalImageId());
		hordingImpl.setShortImageId(getShortImageId());
		hordingImpl.setLongImageId(getLongImageId());
		hordingImpl.setLandLordId(getLandLordId());
		hordingImpl.setOwnerType(getOwnerType());
		hordingImpl.setUpinNo(getUpinNo());
		hordingImpl.setMncTax(getMncTax());
		hordingImpl.setOtherExpYear(getOtherExpYear());
		hordingImpl.setStatus(getStatus());
		hordingImpl.setCreateDate(getCreateDate());
		hordingImpl.setCreatedBy(getCreatedBy());
		hordingImpl.setModifiedDate(getModifiedDate());
		hordingImpl.setModifiedBy(getModifiedBy());

		hordingImpl.resetOriginalValues();

		return hordingImpl;
	}

	@Override
	public int compareTo(Hording hording) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), hording.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Hording)) {
			return false;
		}

		Hording hording = (Hording)obj;

		long primaryKey = hording.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		HordingModelImpl hordingModelImpl = this;

		hordingModelImpl._originalLandLordId = hordingModelImpl._landLordId;

		hordingModelImpl._setOriginalLandLordId = false;

		hordingModelImpl._originalStatus = hordingModelImpl._status;

		hordingModelImpl._setOriginalStatus = false;

		hordingModelImpl._setModifiedDate = false;

		hordingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Hording> toCacheModel() {
		HordingCacheModel hordingCacheModel = new HordingCacheModel();

		hordingCacheModel.hordingId = getHordingId();

		hordingCacheModel.title = getTitle();

		String title = hordingCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			hordingCacheModel.title = null;
		}

		hordingCacheModel.location = getLocation();

		String location = hordingCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			hordingCacheModel.location = null;
		}

		hordingCacheModel.city = getCity();

		String city = hordingCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			hordingCacheModel.city = null;
		}

		hordingCacheModel.district = getDistrict();

		String district = hordingCacheModel.district;

		if ((district != null) && (district.length() == 0)) {
			hordingCacheModel.district = null;
		}

		hordingCacheModel.state = getState();

		String state = hordingCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			hordingCacheModel.state = null;
		}

		hordingCacheModel.hordingType = getHordingType();

		String hordingType = hordingCacheModel.hordingType;

		if ((hordingType != null) && (hordingType.length() == 0)) {
			hordingCacheModel.hordingType = null;
		}

		hordingCacheModel.mediaVehicle = getMediaVehicle();

		String mediaVehicle = hordingCacheModel.mediaVehicle;

		if ((mediaVehicle != null) && (mediaVehicle.length() == 0)) {
			hordingCacheModel.mediaVehicle = null;
		}

		hordingCacheModel.size = getSize();

		String size = hordingCacheModel.size;

		if ((size != null) && (size.length() == 0)) {
			hordingCacheModel.size = null;
		}

		hordingCacheModel.pricePerMonth = getPricePerMonth();

		hordingCacheModel.normalImageId = getNormalImageId();

		hordingCacheModel.shortImageId = getShortImageId();

		hordingCacheModel.longImageId = getLongImageId();

		hordingCacheModel.landLordId = getLandLordId();

		hordingCacheModel.ownerType = getOwnerType();

		hordingCacheModel.upinNo = getUpinNo();

		String upinNo = hordingCacheModel.upinNo;

		if ((upinNo != null) && (upinNo.length() == 0)) {
			hordingCacheModel.upinNo = null;
		}

		hordingCacheModel.mncTax = getMncTax();

		hordingCacheModel.otherExpYear = getOtherExpYear();

		hordingCacheModel.status = getStatus();

		Date createDate = getCreateDate();

		if (createDate != null) {
			hordingCacheModel.createDate = createDate.getTime();
		}
		else {
			hordingCacheModel.createDate = Long.MIN_VALUE;
		}

		hordingCacheModel.createdBy = getCreatedBy();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			hordingCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			hordingCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		hordingCacheModel.modifiedBy = getModifiedBy();

		return hordingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(47);

		sb.append("{hordingId=");
		sb.append(getHordingId());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", location=");
		sb.append(getLocation());
		sb.append(", city=");
		sb.append(getCity());
		sb.append(", district=");
		sb.append(getDistrict());
		sb.append(", state=");
		sb.append(getState());
		sb.append(", hordingType=");
		sb.append(getHordingType());
		sb.append(", mediaVehicle=");
		sb.append(getMediaVehicle());
		sb.append(", size=");
		sb.append(getSize());
		sb.append(", pricePerMonth=");
		sb.append(getPricePerMonth());
		sb.append(", normalImageId=");
		sb.append(getNormalImageId());
		sb.append(", shortImageId=");
		sb.append(getShortImageId());
		sb.append(", longImageId=");
		sb.append(getLongImageId());
		sb.append(", landLordId=");
		sb.append(getLandLordId());
		sb.append(", ownerType=");
		sb.append(getOwnerType());
		sb.append(", upinNo=");
		sb.append(getUpinNo());
		sb.append(", mncTax=");
		sb.append(getMncTax());
		sb.append(", otherExpYear=");
		sb.append(getOtherExpYear());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(73);

		sb.append("<model><model-name>");
		sb.append("com.sphms.common.service.model.Hording");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>hordingId</column-name><column-value><![CDATA[");
		sb.append(getHordingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>location</column-name><column-value><![CDATA[");
		sb.append(getLocation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>city</column-name><column-value><![CDATA[");
		sb.append(getCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>district</column-name><column-value><![CDATA[");
		sb.append(getDistrict());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>state</column-name><column-value><![CDATA[");
		sb.append(getState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hordingType</column-name><column-value><![CDATA[");
		sb.append(getHordingType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mediaVehicle</column-name><column-value><![CDATA[");
		sb.append(getMediaVehicle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>size</column-name><column-value><![CDATA[");
		sb.append(getSize());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pricePerMonth</column-name><column-value><![CDATA[");
		sb.append(getPricePerMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>normalImageId</column-name><column-value><![CDATA[");
		sb.append(getNormalImageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shortImageId</column-name><column-value><![CDATA[");
		sb.append(getShortImageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>longImageId</column-name><column-value><![CDATA[");
		sb.append(getLongImageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>landLordId</column-name><column-value><![CDATA[");
		sb.append(getLandLordId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ownerType</column-name><column-value><![CDATA[");
		sb.append(getOwnerType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>upinNo</column-name><column-value><![CDATA[");
		sb.append(getUpinNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mncTax</column-name><column-value><![CDATA[");
		sb.append(getMncTax());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>otherExpYear</column-name><column-value><![CDATA[");
		sb.append(getOtherExpYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Hording.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Hording.class
		};
	private long _hordingId;
	private String _title;
	private String _location;
	private String _city;
	private String _district;
	private String _state;
	private String _hordingType;
	private String _mediaVehicle;
	private String _size;
	private double _pricePerMonth;
	private long _normalImageId;
	private long _shortImageId;
	private long _longImageId;
	private long _landLordId;
	private long _originalLandLordId;
	private boolean _setOriginalLandLordId;
	private int _ownerType;
	private String _upinNo;
	private double _mncTax;
	private double _otherExpYear;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private Date _createDate;
	private long _createdBy;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _modifiedBy;
	private long _columnBitmask;
	private Hording _escapedModel;
}