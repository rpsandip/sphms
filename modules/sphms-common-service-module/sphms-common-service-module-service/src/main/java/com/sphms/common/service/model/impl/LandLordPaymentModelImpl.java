/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sphms.common.service.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.sphms.common.service.model.LandLordPayment;
import com.sphms.common.service.model.LandLordPaymentModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LandLordPayment service. Represents a row in the &quot;SPHMS_LandLordPayment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link LandLordPaymentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LandLordPaymentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LandLordPaymentImpl
 * @see LandLordPayment
 * @see LandLordPaymentModel
 * @generated
 */
@ProviderType
public class LandLordPaymentModelImpl extends BaseModelImpl<LandLordPayment>
	implements LandLordPaymentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a land lord payment model instance should use the {@link LandLordPayment} interface instead.
	 */
	public static final String TABLE_NAME = "SPHMS_LandLordPayment";
	public static final Object[][] TABLE_COLUMNS = {
			{ "landLordPaymentId", Types.BIGINT },
			{ "landLoadId", Types.BIGINT },
			{ "hordingId", Types.BIGINT },
			{ "amount", Types.DOUBLE },
			{ "chequeNo", Types.VARCHAR },
			{ "bankName", Types.VARCHAR },
			{ "paymentDate", Types.TIMESTAMP },
			{ "createDate", Types.TIMESTAMP },
			{ "createdBy", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("landLordPaymentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("landLoadId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("hordingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("amount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("chequeNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bankName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("paymentDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table SPHMS_LandLordPayment (landLordPaymentId LONG not null primary key,landLoadId LONG,hordingId LONG,amount DOUBLE,chequeNo VARCHAR(75) null,bankName VARCHAR(75) null,paymentDate DATE null,createDate DATE null,createdBy LONG)";
	public static final String TABLE_SQL_DROP = "drop table SPHMS_LandLordPayment";
	public static final String ORDER_BY_JPQL = " ORDER BY landLordPayment.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY SPHMS_LandLordPayment.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.sphms.common.service.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.sphms.common.service.model.LandLordPayment"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.sphms.common.service.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.sphms.common.service.model.LandLordPayment"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.sphms.common.service.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.sphms.common.service.model.LandLordPayment"),
			true);
	public static final long LANDLOADID_COLUMN_BITMASK = 1L;
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.sphms.common.service.service.util.PropsUtil.get(
				"lock.expiration.time.com.sphms.common.service.model.LandLordPayment"));

	public LandLordPaymentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _landLordPaymentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLandLordPaymentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _landLordPaymentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LandLordPayment.class;
	}

	@Override
	public String getModelClassName() {
		return LandLordPayment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("landLordPaymentId", getLandLordPaymentId());
		attributes.put("landLoadId", getLandLoadId());
		attributes.put("hordingId", getHordingId());
		attributes.put("amount", getAmount());
		attributes.put("chequeNo", getChequeNo());
		attributes.put("bankName", getBankName());
		attributes.put("paymentDate", getPaymentDate());
		attributes.put("createDate", getCreateDate());
		attributes.put("createdBy", getCreatedBy());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long landLordPaymentId = (Long)attributes.get("landLordPaymentId");

		if (landLordPaymentId != null) {
			setLandLordPaymentId(landLordPaymentId);
		}

		Long landLoadId = (Long)attributes.get("landLoadId");

		if (landLoadId != null) {
			setLandLoadId(landLoadId);
		}

		Long hordingId = (Long)attributes.get("hordingId");

		if (hordingId != null) {
			setHordingId(hordingId);
		}

		Double amount = (Double)attributes.get("amount");

		if (amount != null) {
			setAmount(amount);
		}

		String chequeNo = (String)attributes.get("chequeNo");

		if (chequeNo != null) {
			setChequeNo(chequeNo);
		}

		String bankName = (String)attributes.get("bankName");

		if (bankName != null) {
			setBankName(bankName);
		}

		Date paymentDate = (Date)attributes.get("paymentDate");

		if (paymentDate != null) {
			setPaymentDate(paymentDate);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long createdBy = (Long)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}
	}

	@Override
	public long getLandLordPaymentId() {
		return _landLordPaymentId;
	}

	@Override
	public void setLandLordPaymentId(long landLordPaymentId) {
		_landLordPaymentId = landLordPaymentId;
	}

	@Override
	public long getLandLoadId() {
		return _landLoadId;
	}

	@Override
	public void setLandLoadId(long landLoadId) {
		_columnBitmask |= LANDLOADID_COLUMN_BITMASK;

		if (!_setOriginalLandLoadId) {
			_setOriginalLandLoadId = true;

			_originalLandLoadId = _landLoadId;
		}

		_landLoadId = landLoadId;
	}

	public long getOriginalLandLoadId() {
		return _originalLandLoadId;
	}

	@Override
	public long getHordingId() {
		return _hordingId;
	}

	@Override
	public void setHordingId(long hordingId) {
		_hordingId = hordingId;
	}

	@Override
	public double getAmount() {
		return _amount;
	}

	@Override
	public void setAmount(double amount) {
		_amount = amount;
	}

	@Override
	public String getChequeNo() {
		if (_chequeNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _chequeNo;
		}
	}

	@Override
	public void setChequeNo(String chequeNo) {
		_chequeNo = chequeNo;
	}

	@Override
	public String getBankName() {
		if (_bankName == null) {
			return StringPool.BLANK;
		}
		else {
			return _bankName;
		}
	}

	@Override
	public void setBankName(String bankName) {
		_bankName = bankName;
	}

	@Override
	public Date getPaymentDate() {
		return _paymentDate;
	}

	@Override
	public void setPaymentDate(Date paymentDate) {
		_paymentDate = paymentDate;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		_createdBy = createdBy;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LandLordPayment.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LandLordPayment toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LandLordPayment)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LandLordPaymentImpl landLordPaymentImpl = new LandLordPaymentImpl();

		landLordPaymentImpl.setLandLordPaymentId(getLandLordPaymentId());
		landLordPaymentImpl.setLandLoadId(getLandLoadId());
		landLordPaymentImpl.setHordingId(getHordingId());
		landLordPaymentImpl.setAmount(getAmount());
		landLordPaymentImpl.setChequeNo(getChequeNo());
		landLordPaymentImpl.setBankName(getBankName());
		landLordPaymentImpl.setPaymentDate(getPaymentDate());
		landLordPaymentImpl.setCreateDate(getCreateDate());
		landLordPaymentImpl.setCreatedBy(getCreatedBy());

		landLordPaymentImpl.resetOriginalValues();

		return landLordPaymentImpl;
	}

	@Override
	public int compareTo(LandLordPayment landLordPayment) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(),
				landLordPayment.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LandLordPayment)) {
			return false;
		}

		LandLordPayment landLordPayment = (LandLordPayment)obj;

		long primaryKey = landLordPayment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LandLordPaymentModelImpl landLordPaymentModelImpl = this;

		landLordPaymentModelImpl._originalLandLoadId = landLordPaymentModelImpl._landLoadId;

		landLordPaymentModelImpl._setOriginalLandLoadId = false;

		landLordPaymentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LandLordPayment> toCacheModel() {
		LandLordPaymentCacheModel landLordPaymentCacheModel = new LandLordPaymentCacheModel();

		landLordPaymentCacheModel.landLordPaymentId = getLandLordPaymentId();

		landLordPaymentCacheModel.landLoadId = getLandLoadId();

		landLordPaymentCacheModel.hordingId = getHordingId();

		landLordPaymentCacheModel.amount = getAmount();

		landLordPaymentCacheModel.chequeNo = getChequeNo();

		String chequeNo = landLordPaymentCacheModel.chequeNo;

		if ((chequeNo != null) && (chequeNo.length() == 0)) {
			landLordPaymentCacheModel.chequeNo = null;
		}

		landLordPaymentCacheModel.bankName = getBankName();

		String bankName = landLordPaymentCacheModel.bankName;

		if ((bankName != null) && (bankName.length() == 0)) {
			landLordPaymentCacheModel.bankName = null;
		}

		Date paymentDate = getPaymentDate();

		if (paymentDate != null) {
			landLordPaymentCacheModel.paymentDate = paymentDate.getTime();
		}
		else {
			landLordPaymentCacheModel.paymentDate = Long.MIN_VALUE;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			landLordPaymentCacheModel.createDate = createDate.getTime();
		}
		else {
			landLordPaymentCacheModel.createDate = Long.MIN_VALUE;
		}

		landLordPaymentCacheModel.createdBy = getCreatedBy();

		return landLordPaymentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{landLordPaymentId=");
		sb.append(getLandLordPaymentId());
		sb.append(", landLoadId=");
		sb.append(getLandLoadId());
		sb.append(", hordingId=");
		sb.append(getHordingId());
		sb.append(", amount=");
		sb.append(getAmount());
		sb.append(", chequeNo=");
		sb.append(getChequeNo());
		sb.append(", bankName=");
		sb.append(getBankName());
		sb.append(", paymentDate=");
		sb.append(getPaymentDate());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.sphms.common.service.model.LandLordPayment");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>landLordPaymentId</column-name><column-value><![CDATA[");
		sb.append(getLandLordPaymentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>landLoadId</column-name><column-value><![CDATA[");
		sb.append(getLandLoadId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hordingId</column-name><column-value><![CDATA[");
		sb.append(getHordingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amount</column-name><column-value><![CDATA[");
		sb.append(getAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>chequeNo</column-name><column-value><![CDATA[");
		sb.append(getChequeNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bankName</column-name><column-value><![CDATA[");
		sb.append(getBankName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paymentDate</column-name><column-value><![CDATA[");
		sb.append(getPaymentDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = LandLordPayment.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			LandLordPayment.class
		};
	private long _landLordPaymentId;
	private long _landLoadId;
	private long _originalLandLoadId;
	private boolean _setOriginalLandLoadId;
	private long _hordingId;
	private double _amount;
	private String _chequeNo;
	private String _bankName;
	private Date _paymentDate;
	private Date _createDate;
	private long _createdBy;
	private long _columnBitmask;
	private LandLordPayment _escapedModel;
}