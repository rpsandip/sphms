/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sphms.common.service.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.sphms.common.service.model.Payment;
import com.sphms.common.service.model.PaymentModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Payment service. Represents a row in the &quot;SPHMS_Payment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link PaymentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PaymentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PaymentImpl
 * @see Payment
 * @see PaymentModel
 * @generated
 */
@ProviderType
public class PaymentModelImpl extends BaseModelImpl<Payment>
	implements PaymentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a payment model instance should use the {@link Payment} interface instead.
	 */
	public static final String TABLE_NAME = "SPHMS_Payment";
	public static final Object[][] TABLE_COLUMNS = {
			{ "paymentId", Types.BIGINT },
			{ "billingId", Types.BIGINT },
			{ "clientId", Types.BIGINT },
			{ "amount", Types.DOUBLE },
			{ "chequeNo", Types.VARCHAR },
			{ "tds", Types.DOUBLE },
			{ "deduction", Types.DOUBLE },
			{ "createDate", Types.TIMESTAMP },
			{ "createdBy", Types.BIGINT },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "modifiedBy", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("paymentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("billingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("clientId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("amount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("chequeNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tds", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("deduction", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table SPHMS_Payment (paymentId LONG not null primary key,billingId LONG,clientId LONG,amount DOUBLE,chequeNo VARCHAR(75) null,tds DOUBLE,deduction DOUBLE,createDate DATE null,createdBy LONG,modifiedDate DATE null,modifiedBy LONG)";
	public static final String TABLE_SQL_DROP = "drop table SPHMS_Payment";
	public static final String ORDER_BY_JPQL = " ORDER BY payment.paymentId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPHMS_Payment.paymentId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.sphms.common.service.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.sphms.common.service.model.Payment"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.sphms.common.service.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.sphms.common.service.model.Payment"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.sphms.common.service.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.sphms.common.service.model.Payment"),
			true);
	public static final long BILLINGID_COLUMN_BITMASK = 1L;
	public static final long PAYMENTID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.sphms.common.service.service.util.PropsUtil.get(
				"lock.expiration.time.com.sphms.common.service.model.Payment"));

	public PaymentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _paymentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPaymentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _paymentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Payment.class;
	}

	@Override
	public String getModelClassName() {
		return Payment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("paymentId", getPaymentId());
		attributes.put("billingId", getBillingId());
		attributes.put("clientId", getClientId());
		attributes.put("amount", getAmount());
		attributes.put("chequeNo", getChequeNo());
		attributes.put("tds", getTds());
		attributes.put("deduction", getDeduction());
		attributes.put("createDate", getCreateDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("modifiedBy", getModifiedBy());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long paymentId = (Long)attributes.get("paymentId");

		if (paymentId != null) {
			setPaymentId(paymentId);
		}

		Long billingId = (Long)attributes.get("billingId");

		if (billingId != null) {
			setBillingId(billingId);
		}

		Long clientId = (Long)attributes.get("clientId");

		if (clientId != null) {
			setClientId(clientId);
		}

		Double amount = (Double)attributes.get("amount");

		if (amount != null) {
			setAmount(amount);
		}

		String chequeNo = (String)attributes.get("chequeNo");

		if (chequeNo != null) {
			setChequeNo(chequeNo);
		}

		Double tds = (Double)attributes.get("tds");

		if (tds != null) {
			setTds(tds);
		}

		Double deduction = (Double)attributes.get("deduction");

		if (deduction != null) {
			setDeduction(deduction);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long createdBy = (Long)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long modifiedBy = (Long)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}
	}

	@Override
	public long getPaymentId() {
		return _paymentId;
	}

	@Override
	public void setPaymentId(long paymentId) {
		_paymentId = paymentId;
	}

	@Override
	public long getBillingId() {
		return _billingId;
	}

	@Override
	public void setBillingId(long billingId) {
		_columnBitmask |= BILLINGID_COLUMN_BITMASK;

		if (!_setOriginalBillingId) {
			_setOriginalBillingId = true;

			_originalBillingId = _billingId;
		}

		_billingId = billingId;
	}

	public long getOriginalBillingId() {
		return _originalBillingId;
	}

	@Override
	public long getClientId() {
		return _clientId;
	}

	@Override
	public void setClientId(long clientId) {
		_clientId = clientId;
	}

	@Override
	public double getAmount() {
		return _amount;
	}

	@Override
	public void setAmount(double amount) {
		_amount = amount;
	}

	@Override
	public String getChequeNo() {
		if (_chequeNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _chequeNo;
		}
	}

	@Override
	public void setChequeNo(String chequeNo) {
		_chequeNo = chequeNo;
	}

	@Override
	public double getTds() {
		return _tds;
	}

	@Override
	public void setTds(double tds) {
		_tds = tds;
	}

	@Override
	public double getDeduction() {
		return _deduction;
	}

	@Override
	public void setDeduction(double deduction) {
		_deduction = deduction;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Payment.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Payment toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Payment)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PaymentImpl paymentImpl = new PaymentImpl();

		paymentImpl.setPaymentId(getPaymentId());
		paymentImpl.setBillingId(getBillingId());
		paymentImpl.setClientId(getClientId());
		paymentImpl.setAmount(getAmount());
		paymentImpl.setChequeNo(getChequeNo());
		paymentImpl.setTds(getTds());
		paymentImpl.setDeduction(getDeduction());
		paymentImpl.setCreateDate(getCreateDate());
		paymentImpl.setCreatedBy(getCreatedBy());
		paymentImpl.setModifiedDate(getModifiedDate());
		paymentImpl.setModifiedBy(getModifiedBy());

		paymentImpl.resetOriginalValues();

		return paymentImpl;
	}

	@Override
	public int compareTo(Payment payment) {
		long primaryKey = payment.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Payment)) {
			return false;
		}

		Payment payment = (Payment)obj;

		long primaryKey = payment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		PaymentModelImpl paymentModelImpl = this;

		paymentModelImpl._originalBillingId = paymentModelImpl._billingId;

		paymentModelImpl._setOriginalBillingId = false;

		paymentModelImpl._setModifiedDate = false;

		paymentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Payment> toCacheModel() {
		PaymentCacheModel paymentCacheModel = new PaymentCacheModel();

		paymentCacheModel.paymentId = getPaymentId();

		paymentCacheModel.billingId = getBillingId();

		paymentCacheModel.clientId = getClientId();

		paymentCacheModel.amount = getAmount();

		paymentCacheModel.chequeNo = getChequeNo();

		String chequeNo = paymentCacheModel.chequeNo;

		if ((chequeNo != null) && (chequeNo.length() == 0)) {
			paymentCacheModel.chequeNo = null;
		}

		paymentCacheModel.tds = getTds();

		paymentCacheModel.deduction = getDeduction();

		Date createDate = getCreateDate();

		if (createDate != null) {
			paymentCacheModel.createDate = createDate.getTime();
		}
		else {
			paymentCacheModel.createDate = Long.MIN_VALUE;
		}

		paymentCacheModel.createdBy = getCreatedBy();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			paymentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			paymentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		paymentCacheModel.modifiedBy = getModifiedBy();

		return paymentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{paymentId=");
		sb.append(getPaymentId());
		sb.append(", billingId=");
		sb.append(getBillingId());
		sb.append(", clientId=");
		sb.append(getClientId());
		sb.append(", amount=");
		sb.append(getAmount());
		sb.append(", chequeNo=");
		sb.append(getChequeNo());
		sb.append(", tds=");
		sb.append(getTds());
		sb.append(", deduction=");
		sb.append(getDeduction());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.sphms.common.service.model.Payment");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>paymentId</column-name><column-value><![CDATA[");
		sb.append(getPaymentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>billingId</column-name><column-value><![CDATA[");
		sb.append(getBillingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>clientId</column-name><column-value><![CDATA[");
		sb.append(getClientId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amount</column-name><column-value><![CDATA[");
		sb.append(getAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>chequeNo</column-name><column-value><![CDATA[");
		sb.append(getChequeNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tds</column-name><column-value><![CDATA[");
		sb.append(getTds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deduction</column-name><column-value><![CDATA[");
		sb.append(getDeduction());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Payment.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Payment.class
		};
	private long _paymentId;
	private long _billingId;
	private long _originalBillingId;
	private boolean _setOriginalBillingId;
	private long _clientId;
	private double _amount;
	private String _chequeNo;
	private double _tds;
	private double _deduction;
	private Date _createDate;
	private long _createdBy;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _modifiedBy;
	private long _columnBitmask;
	private Payment _escapedModel;
}