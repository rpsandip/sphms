/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sphms.common.service.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.sphms.common.service.model.Proposal;
import com.sphms.common.service.model.ProposalModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Proposal service. Represents a row in the &quot;SPHMS_Proposal&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ProposalModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProposalImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProposalImpl
 * @see Proposal
 * @see ProposalModel
 * @generated
 */
@ProviderType
public class ProposalModelImpl extends BaseModelImpl<Proposal>
	implements ProposalModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a proposal model instance should use the {@link Proposal} interface instead.
	 */
	public static final String TABLE_NAME = "SPHMS_Proposal";
	public static final Object[][] TABLE_COLUMNS = {
			{ "proposalId", Types.BIGINT },
			{ "campaignTitle", Types.VARCHAR },
			{ "client", Types.BIGINT },
			{ "pptFileId", Types.BIGINT },
			{ "xlsxFileId", Types.BIGINT },
			{ "startDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP },
			{ "createDate", Types.TIMESTAMP },
			{ "createdBy", Types.BIGINT },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "modifiedBy", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("proposalId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("campaignTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("client", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("pptFileId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("xlsxFileId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table SPHMS_Proposal (proposalId LONG not null primary key,campaignTitle VARCHAR(200) null,client LONG,pptFileId LONG,xlsxFileId LONG,startDate DATE null,endDate DATE null,createDate DATE null,createdBy LONG,modifiedDate DATE null,modifiedBy LONG)";
	public static final String TABLE_SQL_DROP = "drop table SPHMS_Proposal";
	public static final String ORDER_BY_JPQL = " ORDER BY proposal.proposalId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPHMS_Proposal.proposalId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.sphms.common.service.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.sphms.common.service.model.Proposal"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.sphms.common.service.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.sphms.common.service.model.Proposal"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.sphms.common.service.service.util.PropsUtil.get(
				"lock.expiration.time.com.sphms.common.service.model.Proposal"));

	public ProposalModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _proposalId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProposalId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _proposalId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Proposal.class;
	}

	@Override
	public String getModelClassName() {
		return Proposal.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("proposalId", getProposalId());
		attributes.put("campaignTitle", getCampaignTitle());
		attributes.put("client", getClient());
		attributes.put("pptFileId", getPptFileId());
		attributes.put("xlsxFileId", getXlsxFileId());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());
		attributes.put("createDate", getCreateDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("modifiedBy", getModifiedBy());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long proposalId = (Long)attributes.get("proposalId");

		if (proposalId != null) {
			setProposalId(proposalId);
		}

		String campaignTitle = (String)attributes.get("campaignTitle");

		if (campaignTitle != null) {
			setCampaignTitle(campaignTitle);
		}

		Long client = (Long)attributes.get("client");

		if (client != null) {
			setClient(client);
		}

		Long pptFileId = (Long)attributes.get("pptFileId");

		if (pptFileId != null) {
			setPptFileId(pptFileId);
		}

		Long xlsxFileId = (Long)attributes.get("xlsxFileId");

		if (xlsxFileId != null) {
			setXlsxFileId(xlsxFileId);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long createdBy = (Long)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long modifiedBy = (Long)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}
	}

	@Override
	public long getProposalId() {
		return _proposalId;
	}

	@Override
	public void setProposalId(long proposalId) {
		_proposalId = proposalId;
	}

	@Override
	public String getCampaignTitle() {
		if (_campaignTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _campaignTitle;
		}
	}

	@Override
	public void setCampaignTitle(String campaignTitle) {
		_campaignTitle = campaignTitle;
	}

	@Override
	public long getClient() {
		return _client;
	}

	@Override
	public void setClient(long client) {
		_client = client;
	}

	@Override
	public long getPptFileId() {
		return _pptFileId;
	}

	@Override
	public void setPptFileId(long pptFileId) {
		_pptFileId = pptFileId;
	}

	@Override
	public long getXlsxFileId() {
		return _xlsxFileId;
	}

	@Override
	public void setXlsxFileId(long xlsxFileId) {
		_xlsxFileId = xlsxFileId;
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Proposal.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Proposal toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Proposal)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProposalImpl proposalImpl = new ProposalImpl();

		proposalImpl.setProposalId(getProposalId());
		proposalImpl.setCampaignTitle(getCampaignTitle());
		proposalImpl.setClient(getClient());
		proposalImpl.setPptFileId(getPptFileId());
		proposalImpl.setXlsxFileId(getXlsxFileId());
		proposalImpl.setStartDate(getStartDate());
		proposalImpl.setEndDate(getEndDate());
		proposalImpl.setCreateDate(getCreateDate());
		proposalImpl.setCreatedBy(getCreatedBy());
		proposalImpl.setModifiedDate(getModifiedDate());
		proposalImpl.setModifiedBy(getModifiedBy());

		proposalImpl.resetOriginalValues();

		return proposalImpl;
	}

	@Override
	public int compareTo(Proposal proposal) {
		long primaryKey = proposal.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Proposal)) {
			return false;
		}

		Proposal proposal = (Proposal)obj;

		long primaryKey = proposal.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ProposalModelImpl proposalModelImpl = this;

		proposalModelImpl._setModifiedDate = false;
	}

	@Override
	public CacheModel<Proposal> toCacheModel() {
		ProposalCacheModel proposalCacheModel = new ProposalCacheModel();

		proposalCacheModel.proposalId = getProposalId();

		proposalCacheModel.campaignTitle = getCampaignTitle();

		String campaignTitle = proposalCacheModel.campaignTitle;

		if ((campaignTitle != null) && (campaignTitle.length() == 0)) {
			proposalCacheModel.campaignTitle = null;
		}

		proposalCacheModel.client = getClient();

		proposalCacheModel.pptFileId = getPptFileId();

		proposalCacheModel.xlsxFileId = getXlsxFileId();

		Date startDate = getStartDate();

		if (startDate != null) {
			proposalCacheModel.startDate = startDate.getTime();
		}
		else {
			proposalCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			proposalCacheModel.endDate = endDate.getTime();
		}
		else {
			proposalCacheModel.endDate = Long.MIN_VALUE;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			proposalCacheModel.createDate = createDate.getTime();
		}
		else {
			proposalCacheModel.createDate = Long.MIN_VALUE;
		}

		proposalCacheModel.createdBy = getCreatedBy();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			proposalCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			proposalCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		proposalCacheModel.modifiedBy = getModifiedBy();

		return proposalCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{proposalId=");
		sb.append(getProposalId());
		sb.append(", campaignTitle=");
		sb.append(getCampaignTitle());
		sb.append(", client=");
		sb.append(getClient());
		sb.append(", pptFileId=");
		sb.append(getPptFileId());
		sb.append(", xlsxFileId=");
		sb.append(getXlsxFileId());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.sphms.common.service.model.Proposal");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>proposalId</column-name><column-value><![CDATA[");
		sb.append(getProposalId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>campaignTitle</column-name><column-value><![CDATA[");
		sb.append(getCampaignTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>client</column-name><column-value><![CDATA[");
		sb.append(getClient());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pptFileId</column-name><column-value><![CDATA[");
		sb.append(getPptFileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>xlsxFileId</column-name><column-value><![CDATA[");
		sb.append(getXlsxFileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Proposal.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Proposal.class
		};
	private long _proposalId;
	private String _campaignTitle;
	private long _client;
	private long _pptFileId;
	private long _xlsxFileId;
	private Date _startDate;
	private Date _endDate;
	private Date _createDate;
	private long _createdBy;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _modifiedBy;
	private Proposal _escapedModel;
}